# Homeserver details
homeserver:
  # The address that this appservice can use to connect to the homeserver.
  address: https://matrix:8448
  # The domain of the homeserver (for MXIDs, etc).
  domain: matrix.taila659a.ts.net
  # Whether or not to verify the SSL certificate of the homeserver.
  # Only applies if address starts with https://
  verify_ssl: true
  # What software is the homeserver running?
  # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
  software: standard
  # Number of retries for all HTTP requests if the homeserver isn't reachable.
  http_retry_count: 4
  # The URL to push real-time bridge status to.
  # If set, the bridge will make POST requests to this URL whenever a user's Google Chat connection state changes.
  # The bridge will use the appservice as_token to authorize requests.
  status_endpoint: null
  # Endpoint for reporting per-message status.
  message_send_checkpoint_endpoint: null
  # Whether asynchronous uploads via MSC2246 should be enabled for media.
  # Requires a media repo that supports MSC2246.
  async_media: false
# Application service host/registration related details
# Changing these values requires regeneration of the registration.
appservice:
  # The address that the homeserver can use to connect to this appservice.
  address: http://matrix-googlechat:29320
  # The hostname and port where this appservice should listen.
  hostname: 0.0.0.0
  port: 29320
  # The maximum body size of appservice API requests (from the homeserver) in mebibytes
  # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
  max_body_size: 1
  # The full URI to the database. SQLite and Postgres are supported.
  # Format examples:
  #   SQLite:   sqlite:filename.db
  #   Postgres: postgres://username:password@hostname/dbname
  database: sqlite:/data/googlechat.db
  # Additional arguments for asyncpg.create_pool() or sqlite3.connect()
  # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
  # https://docs.python.org/3/library/sqlite3.html#sqlite3.connect
  # For sqlite, min_size is used as the connection thread pool size and max_size is ignored.
  # Additionally, SQLite supports init_commands as an array of SQL queries to run on connect (e.g. to set PRAGMAs).
  database_opts:
    min_size: 1
    max_size: 10
  id: googlechat
  # Username of the appservice bot.
  bot_username: googlechatbot
  # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
  # to leave display name/avatar as-is.
  bot_displayname: Google Chat bridge bot
  bot_avatar: mxc://maunium.net/BDIWAQcbpPGASPUUBuEGWXnQ
  # Whether or not to receive ephemeral events via appservice transactions.
  # Requires MSC2409 support (i.e. Synapse 1.22+).
  # You should disable bridge -> sync_with_custom_puppets when this is enabled.
  ephemeral_events: true
  # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
  as_token: ENC[AES256_GCM,data:gFW+9TqZ+CNU4h8mWSu+9Mok1JymK7wjyzyrxOSqi2/XFkrOGW/DclWyXtuS0ox5GyNHARVpkKQ3T7Uk72uLFw==,iv:VKiT/MUcwDbsgf0q0OclB4Di3XXP6iMMV6oJUPKkROo=,tag:NgPEwcE/GUSLUSujnp+SaQ==,type:str]
  hs_token: ENC[AES256_GCM,data:XQw76hNkq9dpMhO4PVTO03pPv3aXZXY97Znv+pcWzw5SgZtCBlGTI93N/KpJ0rNJ5N8HZJQtcYdUdTRuEcgHjw==,iv:jXTDpidaCUfkspUvRe3HFyerwTEsaK1ZoBAiduqplLc=,tag:j0WU5N2AWwgfrzA4lVfjkA==,type:str]
# Prometheus telemetry config. Requires prometheus-client to be installed.
metrics:
  enabled: false
  listen_port: 8000
# Manhole config.
manhole:
  # Whether or not opening the manhole is allowed.
  enabled: false
  # The path for the unix socket.
  path: /var/tmp/mautrix-googlechat.manhole
  # The list of UIDs who can be added to the whitelist.
  # If empty, any UIDs can be specified in the open-manhole command.
  whitelist:
    - 0
bridge:
  # Localpart template of MXIDs for Google Chat users.
  # {userid} is replaced with the user ID of the Google Chat user.
  username_template: googlechat_{userid}
  # Displayname template for Google Chat users.
  # {full_name}, {first_name}, {last_name} and {email} are replaced with names.
  displayname_template: "{full_name} (Google Chat)"
  # The prefix for commands. Only required in non-management rooms.
  command_prefix: "!gc"
  # Number of chats to sync (and create portals for) on startup/login.
  # Set 0 to disable automatic syncing.
  initial_chat_sync: 10
  # Whether or not the Google Chat users of logged in Matrix users should be
  # invited to private chats when the user sends a message from another client.
  invite_own_puppet_to_pm: false
  # Whether or not to use /sync to get presence, read receipts and typing notifications
  # when double puppeting is enabled
  sync_with_custom_puppets: false
  # Whether or not to update the m.direct account data event when double puppeting is enabled.
  # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
  # and is therefore prone to race conditions.
  sync_direct_chat_list: false
  # Servers to always allow double puppeting from
  double_puppet_server_map:
    matrix.taila659a.ts.net: https://matrix:8448
  double_puppet_allow_discovery: false
  # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
  #
  # If set, custom puppets will be enabled automatically for local users
  # instead of users having to find an access token and run `login-matrix`
  # manually.
  # If using this for other servers than the bridge's server,
  # you must also set the URL in the double_puppet_server_map.
  login_shared_secret_map:
    matrix.taila659a.ts.net: shikanime
  update_avatar_initial_sync: true
  # End-to-bridge encryption support options.
  #
  # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
  encryption:
    # Allow encryption, work in group chat rooms with e2ee enabled
    allow: false
    # Default to encryption, force-enable encryption in all portals the bridge creates
    # This will cause the bridge bot to be in private chats for the encryption to work properly.
    default: false
    # Whether to use MSC2409/MSC3202 instead of /sync long polling for receiving encryption-related data.
    appservice: false
    # Require encryption, drop any unencrypted messages.
    require: false
    # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
    # You must use a client that supports requesting keys from other users to use this feature.
    allow_key_sharing: false
    # Options for deleting megolm sessions from the bridge.
    delete_keys:
      # Beeper-specific: delete outbound sessions when hungryserv confirms
      # that the user has uploaded the key to key backup.
      delete_outbound_on_ack: false
      # Don't store outbound sessions in the inbound table.
      dont_store_outbound: false
      # Ratchet megolm sessions forward after decrypting messages.
      ratchet_on_decrypt: false
      # Delete fully used keys (index >= max_messages) after decrypting messages.
      delete_fully_used_on_decrypt: false
      # Delete previous megolm sessions from same device when receiving a new one.
      delete_prev_on_new_session: false
      # Delete megolm sessions received from a device when the device is deleted.
      delete_on_device_delete: false
      # Periodically delete megolm sessions when 2x max_age has passed since receiving the session.
      periodically_delete_expired: false
      # Delete inbound megolm sessions that don't have the received_at field used for
      # automatic ratcheting and expired session deletion. This is meant as a migration
      # to delete old keys prior to the bridge update.
      delete_outdated_inbound: false
    # What level of device verification should be required from users?
    #
    # Valid levels:
    #   unverified - Send keys to all device in the room.
    #   cross-signed-untrusted - Require valid cross-signing, but trust all cross-signing keys.
    #   cross-signed-tofu - Require valid cross-signing, trust cross-signing keys on first use (and reject changes).
    #   cross-signed-verified - Require valid cross-signing, plus a valid user signature from the bridge bot.
    #                           Note that creating user signatures from the bridge bot is not currently possible.
    #   verified - Require manual per-device verification
    #              (currently only possible by modifying the `trust` column in the `crypto_device` database table).
    verification_levels:
      # Minimum level for which the bridge should send keys to when bridging messages from Telegram to Matrix.
      receive: unverified
      # Minimum level that the bridge should accept for incoming Matrix messages.
      send: unverified
      # Minimum level that the bridge should require for accepting key requests.
      share: cross-signed-tofu
    # Options for Megolm room key rotation. These options allow you to
    # configure the m.room.encryption event content. See:
    # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption for
    # more information about that event.
    rotation:
      # Enable custom Megolm room key rotation settings. Note that these
      # settings will only apply to rooms created after this option is
      # set.
      enable_custom: false
      # The maximum number of milliseconds a session should be used
      # before changing it. The Matrix spec recommends 604800000 (a week)
      # as the default.
      milliseconds: 604800000
      # The maximum number of messages that should be sent with a given a
      # session before changing it. The Matrix spec recommends 100 as the
      # default.
      messages: 100
      # Disable rotating keys when a user's devices change?
      # You should not enable this option unless you understand all the implications.
      disable_device_change_key_rotation: false
  # Whether or not the bridge should send a read receipt from the bridge bot when a message has
  # been sent to Google Chat.
  delivery_receipts: false
  # Whether or not delivery errors should be reported as messages in the Matrix room.
  delivery_error_reports: true
  # Whether the bridge should send the message status as a custom com.beeper.message_send_status event.
  message_status_events: false
  # Whether or not created rooms should have federation enabled.
  # If false, created portal rooms will never be federated.
  federate_rooms: true
  # Settings for backfilling messages from Google Chat.
  backfill:
    # Whether or not the Google Chat users of logged in Matrix users should be
    # invited to private chats when backfilling history from Google Chat. This is
    # usually needed to prevent rate limits and to allow timestamp massaging.
    invite_own_puppet: true
    # Number of threads to backfill in threaded spaces in initial backfill.
    initial_thread_limit: 10
    # Number of replies to backfill in each thread in initial backfill.
    initial_thread_reply_limit: 500
    # Number of messages to backfill in non-threaded spaces and DMs in initial backfill.
    initial_nonthread_limit: 100
    # Number of events to backfill in catchup backfill.
    missed_event_limit: 5000
    # How many events to request from Google Chat at once in catchup backfill?
    missed_event_page_size: 100
    # If using double puppeting, should notifications be disabled
    # while the initial backfill is in progress?
    disable_notifications: false
  # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
  # This field will automatically be changed back to false after it,
  # except if the config file is not writable.
  resend_bridge_info: false
  # Whether or not unimportant bridge notices should be sent to the bridge notice room.
  unimportant_bridge_notices: false
  # Whether or not bridge notices should be disabled entirely.
  disable_bridge_notices: false
  # Whether to explicitly set the avatar and room name for private chat portal rooms.
  # If set to `default`, this will be enabled in encrypted rooms and disabled in unencrypted rooms.
  # If set to `always`, all DM rooms will have explicit names and avatars set.
  # If set to `never`, DM rooms will never have names and avatars set.
  private_chat_portal_meta: default
  provisioning:
    # Internal prefix in the appservice web server for the login endpoints.
    prefix: /_matrix/provision
    # Shared secret for integration managers such as mautrix-manager.
    # If set to "generate", a random string will be generated on the next startup.
    # If null, integration manager access to the API will not be possible.
    shared_secret: ENC[AES256_GCM,data:jAvrCc0p0+TFp+h9pEc9TSn3ZTUd00Db8TmTAdZB+ISQBL0ZP9BxEEbc0YcFkwzauCacUQAGXVbL9Y0WR9l12w==,iv:CXltQxsJNWvoNcxsMQeIPZ8PT58foZdJpVAiEmaR6Mc=,tag:nzb9aAdxWkR+Y0wQVVq8kQ==,type:str]
  # Permissions for using the bridge.
  # Permitted values:
  #       user - Use the bridge with puppeting.
  #      admin - Use and administrate the bridge.
  # Permitted keys:
  #        * - All Matrix users
  #   domain - All users on that homeserver
  #     mxid - Specific user
  permissions:
    matrix.taila659a.ts.net: user
    "@admin:matrix.taila659a.ts.net": admin
logging:
  version: 1
  formatters:
    colored:
      (): mautrix_googlechat.util.ColorFormatter
      format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
  handlers:
    console:
      class: logging.StreamHandler
      formatter: colored
  loggers:
    mau:
      level: DEBUG
    maugclib:
      level: INFO
    aiohttp:
      level: INFO
  root:
    level: DEBUG
    handlers:
      - console
sops:
  age:
    - recipient: age1h0pg9ft6lpyequh7ew2yhrn5m9kc8alc5kmxj3ex2hlzav97lseqwlpz5p
      enc: |
        -----BEGIN AGE ENCRYPTED FILE-----
        YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBlU0VPRmNBRDFLMEYzNnZY
        aStyMU9zcllHQWUyL1VtWGpxc0tvRGpMenprCjd2OE11KzQ3blk5VkdKSWN1QnVk
        NFlKN0RrZkszOHF6ckZ0V216T1pCY2sKLS0tIHRSMjgxc2E2ek5xM2hqbHYvM1lV
        aHVCRTZEbmZYc243MU40MWNweSttbTgKLUL+C/V6TMWT343zfanYrxP7p8mlh2Su
        /23IZ0GPJ6sf1rRIbGx15Jj0lFhJMOKbhJAjQx4P5ZZgpv1+n0IABg==
        -----END AGE ENCRYPTED FILE-----
    - recipient: age17q5ljstyzkvqtejwfnyf5jvqduars2yauw7vtgu5fcf54tm2jf0sspvt3c
      enc: |
        -----BEGIN AGE ENCRYPTED FILE-----
        YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBNbWV4clducEl0WXhvaUdY
        ZzBWUWMwU1diSFV4Ym1OaVRVNDg2M1FxYXd3CnZrS1dvcWcyY3VRT2F6U29mSjIz
        RVRsRGtlb25KVHhFcld1eGJMTkVNZFUKLS0tIGYzQXhKMUtEaUJEOEJBM0R4a1Av
        YStHMXpsZklIc0RnQmlZZlJYZ20wbGsKrT6fqX2qQFPrHN/CYoso4uv1Dbno7P39
        nPoI1o+YUyuCWCtTcMESL29D6Y3xuS0V+zuOu6bWdy9uUB8h9mMKTA==
        -----END AGE ENCRYPTED FILE-----
    - recipient: age1045knj0kzudt68plt0snrhp7u0gffp2uh8ul4g6qy93nel5rw4wq3ag2kl
      enc: |
        -----BEGIN AGE ENCRYPTED FILE-----
        YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSA5b0NvYy9KM1Nja05SYlFS
        amY1d1V3ZG1hMTYrekwraEVlazJQMm9BbmlZCjY5Nk9FNHFvY056ODMzdFhrdWhQ
        YS9kWFF1aEI1Z1hHRDUzRTBNSk9FT0EKLS0tIEVSLzZTYkw2R3lUTm0zVVFYSlpn
        WG9OTHNtTVY2ZmJ1elVDV0E5cU8wemMKrcZGoYy9gGtyFB7vJ2wWT1w5DJcUXvJ+
        U4Eunv9SH8tVXx2tIwuvjFbgLOVfXkkyKxA/9BpmhBIzcGsj9znrMA==
        -----END AGE ENCRYPTED FILE-----
  lastmodified: "2025-10-09T16:34:19Z"
  mac: ENC[AES256_GCM,data:FEGFGWSEQ5Q/JwpHuVT2bgQNdyy04hTCRvHNI/PQsaK1SUzzYoCLtzvbXQ2vqbtGHp4EnlQ3gsLZL62iYrCdRCgH2WdX6DXgF+j1QI87INJ3EpmeNBKL+jvoSYRJIqgUDg5rNIc9BGM4ByMdlIl4gux6/IT7pX83Sp23kW8883Y=,iv:tJtmXHYr3KgAgmpLJfDcpxuTSoPwTSCfnGDV4tnL+NU=,tag:3whXWKyNGrXn2OabhjFsow==,type:str]
  encrypted_regex: ^(as_token|hs_token|shared_secret)$
  version: 3.10.2
